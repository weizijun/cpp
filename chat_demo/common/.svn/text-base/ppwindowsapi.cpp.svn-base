#include "ppwindowsapi.h"

#if (defined(WIN32) || defined(WIN64))

#include   <process.h>

using namespace PPCool;

CPPWindowsAPI::CPPWindowsAPI()
{
}

CPPWindowsAPI::~CPPWindowsAPI()
{
}

void CPPWindowsAPI::Sleep(unsigned int milliseconds)
{
	::Sleep(milliseconds);
}

void CPPWindowsAPI::InitLock(LockID & id)
{
	InitializeCriticalSection(&id);
}

void CPPWindowsAPI::DestroyLock(LockID & id)
{
	DeleteCriticalSection(&id);
}

void CPPWindowsAPI::Lock(LockID & id)
{
	EnterCriticalSection(&id);
}

void CPPWindowsAPI::Unlock(LockID & id)
{
	LeaveCriticalSection(&id);
}

void CPPWindowsAPI::InitCondition(PPCondition & hCondition)
{
	//InitializeConditionVariable(&hCondition);
}

void CPPWindowsAPI::DestroyCondition(PPCondition & hCondition)
{
}

int CPPWindowsAPI::WaitCondition(PPCondition & hCondition, LockID & hLock, unsigned int TimeOut)
{
	//return TRUE == SleepConditionVariableCS(&hCondition, &hLock, TimeOut);
	return -1;
}

void CPPWindowsAPI::NotifyCondition(PPCondition & hCondition)
{
	//WakeConditionVariable(&hCondition);
}

void CPPWindowsAPI::NotifyAllCondition(PPCondition & hCondition)
{
	//WakeAllConditionVariable(&hCondition);
}

PPHANDLE CPPWindowsAPI::CreateThread(PFThreadProc pfThrdProc, void *pArg, BOOL bSuspend)
{
	unsigned int InitFlag = bSuspend ? CREATE_SUSPENDED : 0;
	return (PPHANDLE)_beginthreadex(NULL, 0, pfThrdProc, pArg, InitFlag, NULL);
}

void CPPWindowsAPI::JoinThread(PPHANDLE hThread, int timeout)
{
	::WaitForSingleObject(hThread, timeout);
}

void CPPWindowsAPI::TerminateThread(PPHANDLE hThread, unsigned long ExitCode)
{
	if(::TerminateThread(hThread, ExitCode))
	{
		::CloseHandle(hThread);
	}
}

void CPPWindowsAPI::ResumeThread(PPHANDLE hThread)
{
	::ResumeThread(hThread);
}

void CPPWindowsAPI::SuspendThread(PPHANDLE hThread)
{
	::SuspendThread(hThread);
}

PPCoroContext CPPWindowsAPI::CreateCoroutine(unsigned int StackSize, PFCoroutineProc pfCoroProc, void * pParam)
{
	return CreateFiber(StackSize, pfCoroProc, pParam);
}

void CPPWindowsAPI::TerminateCoroutine(PPCoroContext hCoroContext)
{
	DeleteFiber(hCoroContext);
}

void CPPWindowsAPI::SwitchCoroutine(PPCoroContext, PPCoroContext hNewCoroContext)
{
	SwitchToFiber(hNewCoroContext);
}

#endif
